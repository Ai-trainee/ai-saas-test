你是 TypeScript、Node.js、Next.js 14 App Router、React、Supabase、GraphQL、Genql、Tailwind CSS、Radix UI 和 Shadcn UI 方面的专家开发人员。
### 0. 代码位置和开发流程【重要】
- 代码位置规范:
  - 严格在现有项目目录开发,不要在app目录下创建components，
  - 遵循 Next.js 14 App Router 结构
- 开发流程规范:
  - 先分析现有代码结构
  - 定位需要修改的具体文件
  - 在原有文件中进行改动
  - 确保新代码与现有风格一致
- 修改原则:
  - 保持原有代码结构
  - 在现有组件内添加新功能
  - 禁止重复创建相似功能的组件或平行目录src等

### 1. 开发方法论
- 系统思维:
  - 严谨分析和问题分解
  - 结构化解决方案设计
  - 迭代优化和改进
- 代码质量:
  - 可维护性和可测试性
  - 性能和安全考虑
  - 代码审查标准

### 2. 工程规范
- 代码风格:
  - Standard.js 规则
  - 函数式和声明式编程
  - 命名和文件组织
- 项目结构:
  - 模块化和组件化
  - 类型系统和接口设计
  - 静态资源管理

### 3. React/Next.js 开发规范
- 组件定义和架构:
  - 使用 function 关键字定义组件
  - 组件分解和复用策略
  - 服务端组件优先
- 状态和数据流:
  - Hooks 使用规范和最佳实践
  - 数据获取和状态管理策略
  - 表单处理和验证
- 错误处理:
  - 错误边界和全局错误处理
  - 服务器操作错误处理
  - 用户友好的错误提示
- 性能优化:
  - 服务端渲染和组件优化
  - 代码分割和懒加载
  - 资源优化
- 优化图像：WebP 格式、大小数据、延迟加载。

### 4. 错误处理和验证
- 错误处理策略:
  - 使用 error.tsx 和 global-error.tsx 实现错误边界
  - 避免在服务器操作中使用 try/catch
  - 使用 next-safe-action 处理服务器操作
  - 实现类型安全的服务器操作和验证
- 优先处理错误处理和边缘情况
- 在函数开头处理错误和边缘情况
- 对错误条件使用早期返回以避免深度嵌套
- 利用保护子句尽早处理先决条件和无效状态
- 实现适当的错误日志记录和用户友好的错误消息
- 使用自定义错误类型或工厂进行一致的错误处理
- 确保新增错误处理逻辑与现有错误处理机制协调一致

### 5. UI 和样式
- 组件库和工具:
  - 使用 Shadcn UI 和 Radix UI 作为基础组件
  - 使用 Tailwind CSS 实现响应式设计
  - 使用 Class Variance Authority (CVA) 管理变体
- 样式策略:
  - 使用 Tailwind 进行快速开发和一致的间距/大小
  - 使用 Stylus 模块实现复杂、独特的组件样式
  - 避免使用 @apply 指令
  - 使用移动优先方法进行响应式设计。
### 6. 性能优化
- 服务端渲染优先:
  - 最小化 'use client'、useEffect 和 setState 使用
  - 充分利用 React Server Components 和 SSR
- 代码优化:
  - 使用 Suspense 包装客户端组件
  - 实现动态导入和代码拆分
  - 对非关键组件使用 React.lazy()

### 7. 安全
- 清理用户输入以防止 XSS 攻击。
- 谨慎使用 dangerouslySetInnerHTML，并且只对已清理的内容使用。
- 实现适当的错误处理、用户输入验证和安全编码实践。
- 确保新增功能符合现有的安全标准和最佳实践。

### 8. 关键约定
- 使用"nuqs"进行 URL 搜索参数状态管理。
- 优化 Web Vitals（LCP、CLS、FID）。
- 限制"使用客户端"：
  - 优先使用服务器组件和 Next.js SSR。
  - 仅用于小型组件中的 Web API 访问。
  - 避免用于数据获取或状态管理。
- 平衡 Tailwind 实用程序类与 Stylus 模块的使用：
  - 使用 Tailwind 进行快速开发和一致的间距/大小。
  - 使用 Stylus 模块实现复杂、独特的组件样式。
- 在开发新功能前：
  - 全面了解现有代码库的结构和功能。
  - 识别可复用的组件和模式。
  - 确保新功能与现有架构和约定保持一致。
  - 避免重复实现已有功能。

### 9. 测试和验证
- 代码质量保证：
  - 使用 ESLint 和 Prettier 维护代码风格一致性。
  - 编写自文档化的代码，为复杂逻辑提供简洁注释。
  - 使用 JSDoc 注释改进 IDE 智能感知。
  - 确保完整的 TypeScript 类型覆盖。
- 测试策略：
  - 使用 Jest 和 React Testing Library 进行单元测试。
  - 为关键用户流实施端到端测试。
  - 为每个控制器和服务编写测试。
  - 验证组件的可访问性合规性。
  - 明智地使用快照测试。
  - 将更改分解为小步骤，在每个阶段后进行测试。
  - 重点关注边缘情况和错误场景的测试覆盖。

